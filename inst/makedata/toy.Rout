
R version 2.12.0 (2010-10-15)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i686-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
>  library(aster2, lib.loc = "../../../aster2.Rcheck")
This is beta software.
Unless you need to do aster models with dependence groups,
    use package "aster" instead.
See help(aster2-package) for differences from package "aster"
    and examples.
> 
>  set.seed(42)
> 
>  vars <- paste("y", 1:20, sep = "")
>  pred <- c(0, 0, 0, 3, 4, 2, 2, 2, 8, 9, 7, 7, 7, 13, 14, 12, 12, 12, 18, 19)
>  group <- c(0, 1, 2, 0, 0, 0, 6, 7, 0, 0, 0, 11, 12, 0, 0, 0, 16, 17, 0, 0)
>  code <- rep(c(1, 1, 1, 2, 3), 4)
>  nodetype <- rep(c("death", "stageI", "stageII", "has.offspring",
+      "offspring"), 4)
> 
>  fam <- list(fam.multinomial(3), fam.bernoulli(), fam.zero.truncated.poisson())
> 
>  data.frame(vars, pred, group, code, nodetype, stringsAsFactors = FALSE)
   vars pred group code      nodetype
1    y1    0     0    1         death
2    y2    0     1    1        stageI
3    y3    0     2    1       stageII
4    y4    3     0    2 has.offspring
5    y5    4     0    3     offspring
6    y6    2     0    1         death
7    y7    2     6    1        stageI
8    y8    2     7    1       stageII
9    y9    8     0    2 has.offspring
10  y10    9     0    3     offspring
11  y11    7     0    1         death
12  y12    7    11    1        stageI
13  y13    7    12    1       stageII
14  y14   13     0    2 has.offspring
15  y15   14     0    3     offspring
16  y16   12     0    1         death
17  y17   12    16    1        stageI
18  y18   12    17    1       stageII
19  y19   18     0    2 has.offspring
20  y20   19     0    3     offspring
> 
>  nind <- 250
>  foo <- matrix(0, nrow = nind, ncol = length(vars))
>  colnames(foo) <- vars
>  foo[ , "y1"] <- 1
>  foo <- as.data.frame(foo)
>  foo <- data.frame(foo, z = rnorm(nind))
>  class(foo)
[1] "data.frame"
>  names(foo)
 [1] "y1"  "y2"  "y3"  "y4"  "y5"  "y6"  "y7"  "y8"  "y9"  "y10" "y11" "y12"
[13] "y13" "y14" "y15" "y16" "y17" "y18" "y19" "y20" "z"  
> 
>  bar <- asterdata(foo, vars, pred, group, code, fam)
> 
>  fred <- as.character(bar$redata$varb)
>  sally <- nodetype[match(fred, vars)]
>  unique(paste(fred, sally))
 [1] "y1 death"          "y2 stageI"         "y3 stageII"       
 [4] "y4 has.offspring"  "y5 offspring"      "y6 death"         
 [7] "y7 stageI"         "y8 stageII"        "y9 has.offspring" 
[10] "y10 offspring"     "y11 death"         "y12 stageI"       
[13] "y13 stageII"       "y14 has.offspring" "y15 offspring"    
[16] "y16 death"         "y17 stageI"        "y18 stageII"      
[19] "y19 has.offspring" "y20 offspring"    
>  bar$redata <- data.frame(bar$redata, type = sally)
> 
>  is.validasterdata(bar)
[1] TRUE
> 
>  baz <- model.matrix(resp ~ 0 + type + z, bar$redata)
>  class(baz)
[1] "matrix"
>  colnames(baz)
[1] "typedeath"         "typehas.offspring" "typeoffspring"    
[4] "typestageI"        "typestageII"       "z"                
> 
>  unique(baz[ , "typedeath"])
[1] 1 0
>  unique(baz[ , "typestageI"])
[1] 0 1
>  unique(baz[ , "typestageII"])
[1] 0 1
>  unique(baz[ , "typehas.offspring"])
[1] 0 1
>  unique(baz[ , "typeoffspring"])
[1] 0 1
> 
>  baz[ , "z"] <- baz[ , "z"] * baz[ , "typeoffspring"]
> 
>  beta.true <- c(1.5, - 3.75, 1.75, 0.5, 0.5, 0.333)
> 
>  tau.true <- transformUnconditional(beta.true, modmat = baz, data = bar,
+      from = "beta", to = "tau")
>  names(tau.true) <- colnames(baz)
>  tau.true
        typedeath typehas.offspring     typeoffspring        typestageI 
          64.4780          151.0079         1042.3769          541.8191 
      typestageII                 z 
         174.7281          678.1630 
> 
>  phi.true <- as.numeric(baz %*% beta.true)
> 
>  theta.true <- transformSaturated(phi.true, bar, from = "phi", to = "theta")
> 
>  xi.true <- transformSaturated(theta.true, bar, from = "theta", to = "xi")
> 
>  mu.true <- transformSaturated(xi.true, bar, from = "xi", to = "mu")
> 
>  all.equal(as.vector(tau.true), as.vector(t(baz) %*% mu.true))
[1] TRUE
> 
>  i.typical <- order(foo$z)[length(foo$z) %/% 2]
>  i.typical
[1] 151
>  foo$z[i.typical]
[1] -0.04069848
>  j <- bar$redata$id == i.typical
> 
>  data.frame(vars, phi = phi.true[j], theta = theta.true[j],
+      xi = xi.true[j], mu = mu.true[j], stringsAsFactors = FALSE)
   vars       phi    theta         xi         mu
1    y1  1.500000 1.500000 0.02504657 0.02504657
2    y2  0.500000 5.084605 0.90265660 0.90265660
3    y3  0.500000 2.560043 0.07229683 0.07229683
4    y4 -3.750000 1.923710 0.87255155 0.06308271
5    y5  1.736447 1.736447 5.69664052 0.35935952
6    y6  1.500000 1.500000 0.04574809 0.04129481
7    y7  0.500000 4.388834 0.82220023 0.74216446
8    y8  0.500000 2.560043 0.13205168 0.11919732
9    y9 -3.750000 1.923710 0.87255155 0.10400581
10  y10  1.736447 1.736447 5.69664052 0.59248369
11  y11  1.500000 1.500000 0.09173659 0.06808364
12  y12  0.500000 3.447948 0.64346609 0.47755767
13  y13  0.500000 2.560043 0.26479731 0.19652316
14  y14 -3.750000 1.923710 0.87255155 0.17147659
15  y15  1.736447 1.736447 5.69664052 0.97684046
16  y16  1.500000 1.500000 0.23505213 0.11225094
17  y17  0.500000 0.500000 0.08647084 0.04129481
18  y18  0.500000 2.560043 0.67847703 0.32401191
19  y19 -3.750000 1.923710 0.87255155 0.28271709
20  y20  1.736447 1.736447 5.69664052 1.61053765
> 
> 
>  qux <- simulateSaturated(theta.true, bar)
>  class(qux)
[1] "data.frame"
>  length(qux)
[1] 1
> 
>  toy1 <- bar
>  toy1$redata[[toy1$response.name]] <- qux[[1]]
>  is.validasterdata(toy1)
[1] TRUE
> 
>  save(toy1, file = "toy1.rda")
> 
> 
> proc.time()
   user  system elapsed 
  0.516   0.052   0.553 
